<!DOCTYPE html>
<html lang="en">

<head>

    <title>Create new task - Create a new task with necessary details</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="shortcut icon" type="image/png" href="static/favicon-32x32.png">

    <!-- Bootstrap v5.1.3 CDNs -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>

    <!-- Bootstrap icon -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.5.0/font/bootstrap-icons.css">

    <!-- CSS File -->
    <link rel="stylesheet" href="css/dashboard.css">

    <!-- Import the Font Awesome CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css" />

</head>

<body>

    <div class="create-task">

        <h1 class="text-center"><img src="static/cognizant-logo-with-name.jpg" height="80" width="300" alt=""></h1>

        <form class="needs-validation" id="main-form" action="/create-new-task-data" method="post">
            <div class="form-group create-new-task-size">
                <label class="form-label" for="receivers">Receiver's Email ID/IDs</label>
                <input class="form-control create-task-input" type="text" id="receivers" name="receivers-email-id"
                    placeholder="Enter all the email ids in a comma separated way (like - rupam@cognizant.com,sarfaraz@cognizant.com)."
                    oninput="validateCommaSeperatedReceiversEmailList()" required
                    pattern="^([a-zA-Z0-9._-]+@gofirst\.onmicrosoft\.com)(,[a-zA-Z0-9._-]+@gofirst\.onmicrosoft\.com)*$">
                <div id="receivers-input-error" class="invalid-feedback"></div>

                <label class="form-label" for="task-name">Task name</label>
                <input class="form-control create-task-input" type="text" id="task-name" name="task-name"
                    placeholder="Enter the task name" required>

                <label class="form-label" for="task-details">Task details</label>
                <textarea class="form-control create-task-input" name="task-details" id="task-details" rows="10"
                    placeholder="Enter the task details" required></textarea>


                <label class="form-label">Severity of the task</label>
                <div class="form-check">
                    <input class="form-check-input" type="radio" name="severity" id="high" value="high" required>
                    <label class="form-check-label" for="high">
                        High
                    </label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="radio" name="severity" id="moderate" value="moderate">
                    <label class="form-check-label" for="moderate">
                        Moderate
                    </label>
                </div>
                <div class="form-check create-task-input">
                    <input class="form-check-input" type="radio" name="severity" id="low" value="low">
                    <label class="form-check-label" for="low">
                        Low
                    </label>
                </div>

                <label class="form-label" for="cc">CCs</label>
                <input class="form-control create-task-input" type="text" id="cc" name="cc"
                    placeholder="Enter all the CCs in comma seperated way (like - xyz@cognizant.com, abc@cognizant.com). skip if no CC is there."
                    oninput="validateCcEmailList()"
                    pattern="^([a-zA-Z0-9._-]+@gofirst\.onmicrosoft\.com)(,[a-zA-Z0-9._-]+@gofirst\.onmicrosoft\.com)*$">
                <div id="cc-input-error" class="invalid-feedback"></div>

                <div class="cc-skip-group">
                    <label for="cc-times" class="form-label">How many times CC will be skipped (If any).</label>
                    <input class="form-control create-task-input" type="number" id="cc-times" name="cc-times" value="0"
                        defaultValue="0">
                </div>

                <label class="form-label" for="bcc">BCCs</label>
                <input class="form-control create-task-input" type="text" id="bcc" name="bcc"
                    placeholder="Enter all the BCCs in comma seperated way (like - xyz@cognizant.com, abc@cognizant.com). skip if no BCC is there."
                    oninput="validateBccEmailList()"
                    pattern="^([a-zA-Z0-9._-]+@gofirst\.onmicrosoft\.com)(,[a-zA-Z0-9._-]+@gofirst\.onmicrosoft\.com)*$">
                <div id="bcc-input-error" class="invalid-feedback"></div>

                <div class="bcc-skip-group">
                    <label for="bcc-times" class="form-label">How many times BCC will be skipped (If any).</label>
                    <input class="form-control create-task-input" type="number" id="bcc-times" name="bcc-times"
                        value="0" defaultValue="0">
                </div>

                <label class="form-label">Task recurrence pattern</label>
                <div class="form-check">
                    <input class="form-check-input" type="radio" name="recurrence" id="custom" value="custom" required>
                    <label class="form-check-label" for="custom">
                        Custom date
                    </label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="radio" name="recurrence" id="daily" value="daily">
                    <label class="form-check-label" for="daily">
                        Daily
                    </label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="radio" name="recurrence" id="weekly" value="weekly">
                    <label class="form-check-label" for="weekly">
                        Weekly
                    </label>
                </div>
                <div class="form-check create-task-input">
                    <input class="form-check-input" type="radio" name="recurrence" id="monthly" value="monthly">
                    <label class="form-check-label" for="monthly">
                        Monthly
                    </label>
                </div>

                <div class="recurrence-patteren">

                    <div class="create-task-input" id="custom-dates-list"></div>
                    <div class="custom-date-label">
                        <label class="form-label" for="custom-start-date">Task Trigger Date</label>
                        <label class="form-label custom-end-date-label" for="custom-end-date">Task Completed By:</label>
                    </div>
                    <div class="custom-date">
                        <input class="form-control" type="date" id="custom-start-date" name="custom-date"
                            oninput="validateCustomDate()">
                        <input class="form-control" type="date" id="custom-end-date" name="custom-end-date"
                            oninput="validateCustomDate()">
                    </div>
                    <div id="custom-date-input-error" class="invalid-feedback"></div>
                    <button id="add-custom-date" class="btn btn-success">Add Date</button>
                    <!-- Hidden input tag for receiving all the dates -->
                    <input type="hidden" name="custom-hidden-start-end-date" id="custom-hidden-start-end-date">

                </div>

                <div class="recurrence-patteren">

                    <div class="daily-start-end-label">
                        <label class="form-label" for="daily-start-date">Start date: </label>
                        <label class="form-label daily-end-label" for="daily-end-date">End date: </label>
                    </div>
                    <div class="daily-start-end-input">
                        <input class="form-control create-task-input" type="date" id="daily-start-date"
                            name="daily-start-date" oninput="validateDailyDate()">
                        <input class="form-control create-task-input" type="date" id="daily-end-date"
                            name="daily-end-date" oninput="validateDailyDate()">
                    </div>
                    <div id="daily-date-input-error" class="invalid-feedback"></div>

                    <label for="daily-completion-day-after" class="form-label">Completion Date (After how many days of
                        assigning the task)</label>
                    <input class="form-control create-task-input" type="number" id="daily-completion-day-after"
                        name="daily-completion-day-after" value="1" defaultValue="1">

                </div>

                <div class="recurrence-patteren">

                    <div class="weekly-start-end-label">
                        <label class="form-label" for="weekly-start-date">Start date: </label>
                        <label class="form-label weekly-end-label" for="weekly-end-date">End date: </label>
                    </div>
                    <div class="weekly-start-end-input">
                        <input class="form-control create-task-input" type="date" id="weekly-start-date"
                            name="weekly-start-date" oninput="validateWeeklyDate()">
                        <input class="form-control create-task-input" type="date" id="weekly-end-date"
                            name="weekly-end-date" oninput="validateWeeklyDate()">
                    </div>
                    <div id="weekly-date-input-error" class="invalid-feedback"></div>

                    Select days option
                    <div class="select-days-weekly">
                        <div class="single-day">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" name="weekly-recurrence" id="sunday"
                                    value="sunday">
                                <label class="form-check-label" for="sunday">
                                    Sunday
                                </label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" name="weekly-recurrence" id="monday"
                                    value="monday">
                                <label class="form-check-label" for="monday">
                                    Monday
                                </label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" name="weekly-recurrence" id="tuesday"
                                    value="tuesday">
                                <label class="form-check-label" for="tuesday">
                                    Tuesday
                                </label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" name="weekly-recurrence" id="wednesday"
                                    value="wednesday">
                                <label class="form-check-label" for="wednesday">
                                    Wednesday
                                </label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" name="weekly-recurrence" id="thursday"
                                    value="thursday">
                                <label class="form-check-label" for="thursday">
                                    Thursday
                                </label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" name="weekly-recurrence" id="friday"
                                    value="friday">
                                <label class="form-check-label" for="friday">
                                    Friday
                                </label>
                            </div>
                            <div class="form-check create-task-input">
                                <input class="form-check-input" type="checkbox" name="weekly-recurrence" id="saturday"
                                    value="saturday">
                                <label class="form-check-label" for="saturday">
                                    Saturday
                                </label>
                            </div>
                        </div>
                        <div class="multiple-day">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" name="weekly-recurrence"
                                    id="every-weekdays" value="every-weekdays">
                                <label class="form-check-label" for="every-weekdays">
                                    Every Weekdays
                                </label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" name="weekly-recurrence"
                                    id="every-weekends" value="every-weekends">
                                <label class="form-check-label" for="every-weekends">
                                    Every Weekends
                                </label>
                            </div>
                        </div>
                    </div>

                    <label for="weekly-completion-day-after" class="form-label">Completion Date (After how many days of
                        assigning the task)</label>
                    <input class="form-control create-task-input" type="number" id="weekly-completion-day-after"
                        name="weekly-completion-day-after" value="1" defaultValue="1">

                </div>
                <div class="recurrence-patteren">

                    <div class="monthly-start-end-label">
                        <label class="form-label" for="monthly-start-date">Start date: </label>
                        <label class="form-label monthly-end-label" for="monthly-end-date">End date: </label>
                    </div>
                    <div class="monthly-start-end-input">
                        <input class="form-control create-task-input" type="date" id="monthly-start-date"
                            name="monthly-start-date" oninput="validateMonthlyDate()">
                        <input class="form-control create-task-input" type="date" id="monthly-end-date"
                            name="monthly-end-date" oninput="validateMonthlyDate()">
                    </div>
                    <div id="monthly-date-input-error" class="invalid-feedback"></div>

                    Select days option
                    <div class="select-days-monthly">
                        <!-- function for determining the suffix of the date in the month -->
                        <% function getNumberWithSuffix(number) { if (number % 100>= 11 && number % 100 <= 13) { return
                                number + "th" ; } else { switch (number % 10) { case 1: return number + "st" ; case 2:
                                return number + "nd" ; case 3: return number + "rd" ; default: return number + "th" ; }
                                } } %>
                                <div class="first-column-monthly">
                                    <% for (let i=1; i <=8; i++) { %>
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" name="monthly-recurrence"
                                                id="m-<%= i %>" value="m-<%= i %>">
                                            <label class="form-check-label" for="m-<%= i %>">
                                                <%= getNumberWithSuffix(i) %>
                                            </label>
                                        </div>
                                        <% } %>
                                </div>
                                <div class="second-column-monthly">
                                    <% for (let i=9; i <=16; i++) { %>
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" name="monthly-recurrence"
                                                id="m-<%= i %>" value="m-<%= i %>">
                                            <label class="form-check-label" for="m-<%= i %>">
                                                <%= getNumberWithSuffix(i) %>
                                            </label>
                                        </div>
                                        <% } %>
                                </div>
                                <div class="third-column-monthly">
                                    <% for (let i=17; i <=24; i++) { %>
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" name="monthly-recurrence"
                                                id="m-<%= i %>" value="m-<%= i %>">
                                            <label class="form-check-label" for="m-<%= i %>">
                                                <%= getNumberWithSuffix(i) %>
                                            </label>
                                        </div>
                                        <% } %>
                                </div>
                                <div class="fourth-column-monthly">
                                    <% for (let i=25; i <=31; i++) { %>
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" name="monthly-recurrence"
                                                id="m-<%= i %>" value="m-<%= i %>">
                                            <label class="form-check-label" for="m-<%= i %>">
                                                <%= getNumberWithSuffix(i) %>
                                            </label>
                                        </div>
                                        <% } %>
                                </div>
                    </div>

                    <label for="monthly-completion-day-after" class="form-label">Completion Date (After how many days of
                        assigning the task)</label>
                    <input class="form-control create-task-input" type="number" id="monthly-completion-day-after"
                        name="monthly-completion-day-after" value="1" defaultValue="1">

                </div>

                <input class="form-check-input create-task-input" type="checkbox" id="meeting-needed"
                    name="meeting-needed" value="meeting_needed">
                <label class="form-label"> Do you want to call a meeting with the defaulters on some specific
                    date</label>

                <div class="meeting-needed-div">
                    <label class="form-label">Meeting preferance</label>
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" name="meeting-preferance-day-type"
                            id="day-before" value="day-before">
                        <label class="form-check-label" for="day-before">
                            One day before the last date of completion
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" name="meeting-preferance-day-type" id="day-same"
                            value="day-same">
                        <label class="form-check-label" for="day-same">
                            On the day of the last date of completion
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" name="meeting-preferance-day-type"
                            id="day-after" value="day-after">
                        <label class="form-check-label" for="day-after">
                            One day after the last date of completion
                        </label>
                    </div>
                    <div class="form-check create-task-input">
                        <input class="form-check-input" type="checkbox" name="meeting-preferance-day-type"
                            id="day-custom" value="day-custom">
                        <label class="form-check-label" for="day-custom">
                            Custom date
                        </label>
                    </div>
                </div>

                <div class="mail-day-before-same-after-time">
                    <label class="form-label" for="before-same-after-time">Meeting Time (reminder - 15 min
                        before)</label>
                    <input class="form-control create-task-input" type="time" id="before-same-after-time"
                        name="before-same-after-time">
                </div>

                <div class="custom-meeting-date-and-time">
                    <div class="create-task-input" id="custom-meeting-date-and-time-list"></div>
                    <div class="custom-meeting-date-and-time-label">
                        <label class="form-label" for="custom-meeting-date">Custom date</label>
                        <label class="form-label custom-end-meeting-date-and-time-label"
                            for="custom-meeting-time">Meeting time
                            (reminder - 15 min before)</label>
                    </div>
                    <div class="custom-meeting-date-and-time-input">
                        <input class="form-control" type="date" id="custom-meeting-date" name="custom-meeting-date">
                        <input class="form-control" type="time" id="custom-meeting-time" name="custom-meeting-time">
                    </div>
                    <button id="add-custom-meeting-date-and-time" class="btn btn-success">Add Date</button>
                    <input type="hidden" name="custom-hidden-meeting-date-time" id="custom-hidden-meeting-date-time">
                </div>

            </div>
            <input class="btn btn-success w-100" type="submit" value="Proceed">
        </form>

    </div>
    <script>
        const ccInput = document.getElementById('cc');
        const bccInput = document.getElementById('bcc');
        const ccSkipGroup = document.getElementsByClassName('cc-skip-group')[0];
        const bccSkipGroup = document.getElementsByClassName('bcc-skip-group')[0];

        function checkInputsCcBcc() {
            if (ccInput.value) {
                ccSkipGroup.classList.remove('d-none');
            } else {
                ccSkipGroup.classList.add('d-none');
            }

            if (bccInput.value) {
                bccSkipGroup.classList.remove('d-none');
            } else {
                bccSkipGroup.classList.add('d-none');
            }
        }

        ccInput.addEventListener('input', function () {
            checkInputsCcBcc();
        });

        bccInput.addEventListener('input', function () {
            checkInputsCcBcc();
        });

        // call the function once on page load
        checkInputsCcBcc();

        // ------------------------------------------------------------------------------------------------------ //

        const customClass = document.getElementsByClassName('recurrence-patteren')[0];
        const dailyClass = document.getElementsByClassName('recurrence-patteren')[1];
        const weeklyClass = document.getElementsByClassName('recurrence-patteren')[2];
        const monthlyClass = document.getElementsByClassName('recurrence-patteren')[3];

        const customRadio = document.getElementById('custom');
        const dailyRadio = document.getElementById('daily');
        const weeklyRadio = document.getElementById('weekly');
        const monthlyRadio = document.getElementById('monthly');

        function showDiv(div) {
            div.classList.remove('d-none');
            div.scrollIntoView({ behavior: 'smooth' });
        }

        function hideDiv(div) {
            div.classList.add('d-none');
        }


        function activateRecurrencePatteren() {
            // Hide all the divs on page load
            hideDiv(customClass);
            hideDiv(dailyClass);
            hideDiv(weeklyClass);
            hideDiv(monthlyClass);

            customRadio.addEventListener('click', function () {
                showDiv(customClass);
                hideDiv(dailyClass);
                hideDiv(weeklyClass);
                hideDiv(monthlyClass);
            });

            dailyRadio.addEventListener('click', function () {
                hideDiv(customClass);
                showDiv(dailyClass);
                hideDiv(weeklyClass);
                hideDiv(monthlyClass);
            });

            weeklyRadio.addEventListener('click', function () {
                hideDiv(customClass);
                hideDiv(dailyClass);
                showDiv(weeklyClass);
                hideDiv(monthlyClass);
            });

            monthlyRadio.addEventListener('click', function () {
                hideDiv(customClass);
                hideDiv(dailyClass);
                hideDiv(weeklyClass);
                showDiv(monthlyClass);
            });
        }

        activateRecurrencePatteren();

        // ---------------------------------------------------------------------------------------

        const startDateInput = document.getElementById("custom-start-date");
        const endDateInput = document.getElementById("custom-end-date");
        const addButton = document.getElementById("add-custom-date");
        const datesList = document.getElementById("custom-dates-list");
        let dates = [];

        addButton.addEventListener("click", function (event) {
            event.preventDefault(); // prevent form submission

            const startDate = startDateInput.value;
            const endDate = endDateInput.value;

            if (!startDate || !endDate) {
                alert("Please enter the start and end date");
                return;
            }

            dates.push([startDate, endDate]);

            // Update the hidden input field value
            document.getElementById('custom-hidden-start-end-date').value = JSON.stringify(dates);

            let output = '';
            for (let i = 0; i < dates.length; i++) {
                output += `${i + 1}. Trigger date: ${dates[i][0]} || Completed By: ${dates[i][1]} <button class="btn delete-btn"><i class="fas fa-trash"></i></button><br/>`;
            }

            datesList.innerHTML = output;

            // call the submit button enabled function
            checkFormValidity();

            // scroll to the bottom of the page
            const newDateElement = datesList.lastElementChild;
            newDateElement.scrollIntoView({ behavior: "smooth" });

            // clear inputs
            startDateInput.value = "";
            endDateInput.value = "";

            // add event listener to each delete button
            const deleteButtons = document.querySelectorAll('.delete-btn');
            for (let i = 0; i < deleteButtons.length; i++) {
                deleteButtons[i].addEventListener('click', function (event) {
                    event.preventDefault();
                    dates.splice(i, 1);

                    // Update the hidden input field value
                    document.getElementById('custom-hidden-start-end-date').value = JSON.stringify(dates);

                    let output = '';
                    for (let j = 0; j < dates.length; j++) {
                        output += `${j + 1}. Trigger date: ${dates[j][0]} || Completed By: ${dates[j][1]} <button class="btn delete-btn"><i class="fas fa-trash"></i></button><br/>`;
                    }
                    datesList.innerHTML = output;

                    // call the submit button enabled function
                    checkFormValidity();

                    // add event listener again after deleting an item
                    addDeleteListeners();
                });
            }
        });

        function addDeleteListeners() {
            const deleteButtons = document.querySelectorAll('.delete-btn');
            for (let i = 0; i < deleteButtons.length; i++) {
                deleteButtons[i].addEventListener('click', function (event) {
                    event.preventDefault();
                    dates.splice(i, 1);

                    // Update the hidden input field value
                    document.getElementById('custom-hidden-start-end-date').value = JSON.stringify(dates);

                    let output = '';
                    for (let j = 0; j < dates.length; j++) {
                        output += `${j + 1}. Trigger date: ${dates[j][0]} || Completed By: ${dates[j][1]} <button class="btn delete-btn"><i class="fas fa-trash"></i></button><br/>`;
                    }
                    datesList.innerHTML = output;
                    // call the submit button enabled function
                    checkFormValidity();

                    // add event listener again after deleting an item
                    addDeleteListeners();
                });
            }
        }

        addDeleteListeners();


        // ------------------------------------------------------------------------------------------

        const meetingNeededCheckbox = document.getElementById("meeting-needed");
        const meetingNeededDiv = document.querySelector(".meeting-needed-div");

        meetingNeededCheckbox.addEventListener("change", function () {
            if (this.checked) {
                meetingNeededDiv.style.display = "block";
                // scrolls to bottom of the page
                meetingNeededCheckbox.scrollIntoView({ behavior: 'smooth' });
            } else {
                meetingNeededDiv.style.display = "none";
            }
        });

        // -----------------------------------------------------------------------------------------

        const meetingPreferanceCheckboxes = document.getElementsByName("meeting-preferance-day-type");

        meetingNeededCheckbox.addEventListener("change", function () {
            if (!meetingNeededCheckbox.checked) {
                for (let i = 0; i < meetingPreferanceCheckboxes.length; i++) {
                    meetingPreferanceCheckboxes[i].checked = false;
                }
                const mailDayBeforeSameAfterDiv = document.querySelector(".mail-day-before-same-after-time");
                const customDateDiv = document.querySelector(".custom-meeting-date-and-time");
                const customMeetingDateInput = document.getElementById("custom-meeting-date");
                const customMeetingTimeInput = document.getElementById("custom-meeting-time");
                const beforeSameAfterTimeInput = document.getElementById("before-same-after-time")

                mailDayBeforeSameAfterDiv.style.display = "none"
                customDateDiv.style.display = "none"
                customMeetingDateInput.value = ""
                customMeetingTimeInput.value = ""
                beforeSameAfterTimeInput.value = ""
            }
        });


        // -----------------------------------------------------------------------------------------

        //mail-day-before-same-after
        // Get a reference to the "day-custom" checkbox element
        const mailDayBeforeCheckbox = document.getElementById("day-before");
        const mailDaySameCheckbox = document.getElementById("day-same")
        const mailDayAfterCheckbox = document.getElementById("day-after")

        // Get a reference to the "mail-day-before-same-after" div element
        const mailDayBeforeSameAfterDiv = document.querySelector(".mail-day-before-same-after-time");

        // Add an event listener to the checkboxes to track their state changes
        [mailDayBeforeCheckbox, mailDaySameCheckbox, mailDayAfterCheckbox].forEach(function (checkbox) {
            checkbox.addEventListener("change", function () {
                if (mailDayBeforeCheckbox.checked || mailDaySameCheckbox.checked || mailDayAfterCheckbox.checked) {
                    mailDayBeforeSameAfterDiv.style.display = "block"; // Show the "mail-day-before-same-after" div

                    // scrolls to bottom of the page
                    checkbox.scrollIntoView({ behavior: 'smooth' });
                } else {
                    mailDayBeforeSameAfterDiv.style.display = "none"; // Hide the "mail-day-before-same-after" div
                }
            });
        });


        // ------------------------------------------------------------------------------------------

        // Get a reference to the "day-custom" checkbox element
        const customCheckbox = document.getElementById("day-custom");

        // Get a reference to the "custom-meeting-date" div element
        const customDateDiv = document.querySelector(".custom-meeting-date-and-time");

        // Add an event listener to the "day-custom" checkbox to track its state changes
        customCheckbox.addEventListener("change", function () {
            if (this.checked) {
                customDateDiv.style.display = "block"; // Show the "custom-meeting-date" div

                // scrolls to bottom of the page
                customCheckbox.scrollIntoView({ behavior: 'smooth' });
            } else {
                customDateDiv.style.display = "none"; // Hide the "custom-meeting-date" div
            }
        });

        // ---------------------------------------------------------------------------------------------------

        const addCustomMeetingButton = document.getElementById("add-custom-meeting-date-and-time");
        const customMeetingDatesList = document.getElementById("custom-meeting-date-and-time-list");
        const customMeetingDateInput = document.getElementById("custom-meeting-date");
        const customMeetingTimeInput = document.getElementById("custom-meeting-time");
        const clearCustomMeetingCheckbox = document.getElementById("clear-custom-meeting");
        let customMeetingDates = [];

        addCustomMeetingButton.addEventListener("click", function (event) {
            event.preventDefault(); // prevent form submission

            const meetingDate = customMeetingDateInput.value;
            const meetingTime = customMeetingTimeInput.value;

            if (!meetingDate || !meetingTime) {
                alert("Please enter the meeting date and time properly");
                return;
            }

            customMeetingDates.push([meetingDate, meetingTime]);

            // Update the hidden input field value
            document.getElementById('custom-hidden-meeting-date-time').value = JSON.stringify(customMeetingDates);

            let output = '';
            for (let i = 0; i < customMeetingDates.length; i++) {
                output += `${i + 1}. Meeting date: ${customMeetingDates[i][0]} || Meeting Time: ${customMeetingDates[i][1]} <button class="btn meeting-delete-btn"><i class="fas fa-trash"></i></button><br/>`;
            }

            customMeetingDatesList.innerHTML = output;

            // enable/disable the submit button
            checkFormValidity();

            // scroll to the bottom of the page
            const newDateElement = customMeetingDatesList.lastElementChild;
            newDateElement.scrollIntoView({ behavior: "smooth" });

            customMeetingDateInput.value = "";
            customMeetingTimeInput.value = "";

            const meetingDeleteButtons = document.querySelectorAll('.meeting-delete-btn');
            for (let i = 0; i < meetingDeleteButtons.length; i++) {
                meetingDeleteButtons[i].addEventListener('click', function (event) {
                    event.preventDefault();
                    customMeetingDates.splice(i, 1);

                    // Update the hidden input field value
                    document.getElementById('custom-hidden-meeting-date-time').value = JSON.stringify(customMeetingDates);

                    let output = '';
                    for (let j = 0; j < customMeetingDates.length; j++) {
                        output += `${j + 1}. Meeting date: ${customMeetingDates[j][0]} || Meeting Time: ${customMeetingDates[j][1]} <button class="btn meeting-delete-btn"><i class="fas fa-trash"></i></button><br/>`;
                    }
                    customMeetingDatesList.innerHTML = output;

                    // enable/disable the submit button
                    checkFormValidity();

                    // add event listener again after deleting an item
                    addMeetingDeleteListeners();
                });
            }
        });

        function addMeetingDeleteListeners() {
            const meetingDeleteButtons = document.querySelectorAll('.meeting-delete-btn');
            for (let i = 0; i < meetingDeleteButtons.length; i++) {
                meetingDeleteButtons[i].addEventListener('click', function (event) {
                    event.preventDefault();
                    customMeetingDates.splice(i, 1);

                    // Update the hidden input field value
                    document.getElementById('custom-hidden-meeting-date-time').value = JSON.stringify(customMeetingDates);

                    let output = '';
                    for (let j = 0; j < customMeetingDates.length; j++) {
                        output += `${j + 1}. Meeting date: ${customMeetingDates[j][0]} || Meeting Time: ${customMeetingDates[j][1]} <button class="btn meeting-delete-btn"><i class="fas fa-trash"></i></button><br/>`;
                    }
                    customMeetingDatesList.innerHTML = output;

                    // enable/disable the submit button
                    checkFormValidity();

                    // add event listener again after deleting an item
                    addMeetingDeleteListeners();
                });
            }
        }

        addMeetingDeleteListeners();


        // --------------------------------------------------------------------------------------------------

        // if anything from the left side checkbox is selected, then nothing will be selected from the right side.
        // Get references to all checkboxes
        const singleDayCheckboxes = document.querySelectorAll(".single-day input[type=checkbox]");
        const multipleDayCheckboxes = document.querySelectorAll(".multiple-day input[type=checkbox]");

        // Add event listeners to single-day checkboxes
        singleDayCheckboxes.forEach(function (checkbox) {
            checkbox.addEventListener("change", function () {
                // If this checkbox is checked, uncheck all checkboxes in multiple-day div
                if (this.checked) {
                    multipleDayCheckboxes.forEach(function (checkbox) {
                        checkbox.checked = false;
                    });
                }
            });
        });

        // Add event listeners to multiple-day checkboxes
        multipleDayCheckboxes.forEach(function (checkbox) {
            checkbox.addEventListener("change", function () {
                // If this checkbox is checked, uncheck all checkboxes in single-day div
                if (this.checked) {
                    singleDayCheckboxes.forEach(function (checkbox) {
                        checkbox.checked = false;
                    });
                }
            });
        });

        // ---------------------------------------------------------------------------------------------------
        // ---------------------------------------------------------------------------------------------------
        // disable the submit button if all the inputs are not valid
        // Get the form and submit button
        const form = document.querySelector('form');
        const submitButton = form.querySelector('input[type="submit"]');

        // Disable the submit button by default
        submitButton.disabled = true;

        function checkFormValidity() {
            // Check if all inputs are valid
            const inputs = form.querySelectorAll('input[required], textarea[required]');
            const valid = [...inputs].every(input => input.checkValidity());

            // Check if the custom date radio button is selected and there are no dates
            const noDates = dates.length === 0;

            // get the daily start and end date
            const dailyStartDate = document.getElementById('daily-start-date');
            const dailyEndDate = document.getElementById('daily-end-date');

            // get weekly start and end date
            const weeklyStartDate = document.getElementById('weekly-start-date')
            const weeklyEndDate = document.getElementById('weekly-end-date')

            // get weekly start and end date
            const monthlyStartDate = document.getElementById('monthly-start-date')
            const monthlyEndDate = document.getElementById('monthly-end-date')

            // check any of the weekly checkbox is checked or not
            let weeklyChecked = false;
            if (weeklyRadio.checked) {
                const checkboxes = document.querySelectorAll('input[name="weekly-recurrence"]');

                checkboxes.forEach((checkbox) => {
                    if (checkbox.checked) {
                        weeklyChecked = true;
                    }
                });
            }

            // check any of the monthly checkbox is checked or not
            let monthlyChecked = false;
            if (monthlyRadio.checked) {
                const checkboxes = document.querySelectorAll('input[name="monthly-recurrence"]');

                checkboxes.forEach((checkbox) => {
                    if (checkbox.checked) {
                        monthlyChecked = true;
                    }
                });
            }

            // for the email-needed section
            const meetingNeeded = document.getElementById('meeting-needed')

            // if meetingNeeded is selected then any of the fellow checkbox must be selected
            let meetingChecked = false
            if (meetingNeeded.checked) {
                const checkboxes = document.querySelectorAll('input[name="meeting-preferance-day-type"]');

                checkboxes.forEach((checkbox) => {
                    if (checkbox.checked) {
                        meetingChecked = true;
                    }
                });
            }

            const mailDayBeforeCheckbox = document.getElementById('day-before')
            const mailDaySameCheckbox = document.getElementById('day-same')
            const mailDayAfterCheckbox = document.getElementById('day-after')
            const mailDayCustomCheckbox = document.getElementById('day-custom')

            const beforeSameAfterTimeInput = document.getElementById('before-same-after-time');
            // Check if the custom date radio button is selected and there are no dates
            const noCustomMailNeededDates = customMeetingDates.length !== 0;

            let meetingInputDateTime = false
            if (mailDayCustomCheckbox.checked) {
                if (noCustomMailNeededDates) {
                    meetingInputDateTime = true
                }
            } else {
                meetingInputDateTime = true
            }
            
            let meetingInputTime = false
            if (mailDayBeforeCheckbox.checked || mailDaySameCheckbox.checked || mailDayAfterCheckbox.checked) {
                if (beforeSameAfterTimeInput.value !== '') {
                    meetingInputTime = true
                }
            } else {
                meetingInputTime = true
            }

            // logs
            // console.log("valid " + valid);
            // console.log("customDateRadio.checked " + customRadio.checked);
            // console.log("noDates " + noDates);
            // console.log(weeklyStartDate.value === '' || weeklyEndDate.value === '');
            // if (meetingNeeded.checked) {
            //     console.log("only time " + (beforeSameAfterTimeInput.value !== ''));
            //     console.log("date " + (customMeetingDateInput.value !== ''));
            //     console.log("time " + (customMeetingTimeInput.value !== ''));
            //     console.log("meetingchecked ", meetingChecked);
            //     console.log("meetingInput ", meetingInput);
            // }

            if (customRadio.checked && noDates) {
                submitButton.disabled = true;
            } else if (dailyRadio.checked && (dailyStartDate.value === '' || dailyEndDate.value === '' || (dailyStartDate.value > dailyEndDate.value))) {
                submitButton.disabled = true;
            } else if (weeklyRadio.checked && (!weeklyChecked || weeklyStartDate.value === '' || weeklyEndDate.value === '')) {
                submitButton.disabled = true;
            } else if (monthlyRadio.checked && (!monthlyChecked || monthlyStartDate.value === '' || monthlyEndDate.value === '')) {
                submitButton.disabled = true;
            } else if (meetingNeeded.checked && !meetingChecked) {
                submitButton.disabled = true;
            } else if (meetingNeeded.checked && meetingChecked && !(meetingInputDateTime && meetingInputTime)) {
                submitButton.disabled = true;
            } else {
                // Enable/disable the submit button based on validity
                submitButton.disabled = !valid;
            }
        }

        form.addEventListener('input', checkFormValidity);


        // ---------------------------------------------------------------------------------------------------
        // ---------------------------------------------------------------------------------------------------
        // Inputs validation checks in the front-end
        // receiver's emails, comma seperated value
        function validateCommaSeperatedReceiversEmailList() {
            // receivers
            // receivers-input-error
            const textInput = document.getElementById("receivers");
            const textPattern = /^([a-zA-Z0-9._-]+@gofirst\.onmicrosoft\.com)(,[a-zA-Z0-9._-]+@gofirst\.onmicrosoft\.com)*$/;
            result = textPattern.test(textInput.value.trim())

            if (!result) {
                textInput.classList.add("is-invalid");
                const receiversInputError = document.getElementById("receivers-input-error");
                receiversInputError.textContent = "Please enter all email ids in a comma separated way without space in between";
                receiversInputError.style.display = "block";
            } else {
                textInput.classList.remove("is-invalid");
                document.getElementById("receivers-input-error").style.display = "none";
            }
        }

        // check CC emails are strictly comma seperated or not
        function validateCcEmailList() {
            // receivers
            // receivers-input-error
            const textInput = document.getElementById("cc");
            const textPattern = /^([a-zA-Z0-9._-]+@gofirst\.onmicrosoft\.com)(,[a-zA-Z0-9._-]+@gofirst\.onmicrosoft\.com)*$/;
            result = textPattern.test(textInput.value.trim())

            if (!result) {
                textInput.classList.add("is-invalid");
                const receiversInputError = document.getElementById("cc-input-error");
                receiversInputError.textContent = "Please enter all email ids in a comma separated way without space in between";
                receiversInputError.style.display = "block";
            } else {
                textInput.classList.remove("is-invalid");
                document.getElementById("cc-input-error").style.display = "none";
            }
        }

        // check BCC emails are strictly comma seperated or not
        function validateBccEmailList() {
            // receivers
            // receivers-input-error
            const textInput = document.getElementById("bcc");
            const textPattern = /^([a-zA-Z0-9._-]+@gofirst\.onmicrosoft\.com)(,[a-zA-Z0-9._-]+@gofirst\.onmicrosoft\.com)*$/;
            result = textPattern.test(textInput.value.trim())

            if (!result) {
                textInput.classList.add("is-invalid");
                const receiversInputError = document.getElementById("bcc-input-error");
                receiversInputError.textContent = "Please enter all email ids in a comma separated way without space in between";
                receiversInputError.style.display = "block";
            } else {
                textInput.classList.remove("is-invalid");
                document.getElementById("bcc-input-error").style.display = "none";
            }
        }

        // check 'trigger date' is less than the 'completed by' or not
        // in the custom section
        function validateCustomDate() {
            const startDateInput = document.getElementById("custom-start-date");
            const endDateInput = document.getElementById("custom-end-date");
            const addButton = document.getElementById("add-custom-date");

            // logs
            // console.log("start date " + startDateInput.value);
            // console.log("end date " + endDateInput.value);
            // console.log(startDateInput.value === '' || endDateInput.value === '');

            if (startDateInput.value === '' || endDateInput.value === '') {
                // console.log("in the if");
                return 0
            } else {
                // console.log("in the else");
                if (startDateInput.value > endDateInput.value) {
                    startDateInput.classList.add("is-invalid");
                    endDateInput.classList.add("is-invalid");
                    const customDateInputError = document.getElementById("custom-date-input-error");
                    customDateInputError.textContent = "Last date of completion must be atleast on day after the trigger date";
                    customDateInputError.style.display = "block";
                    addButton.disabled = true;
                } else {
                    startDateInput.classList.remove("is-invalid");
                    endDateInput.classList.remove("is-invalid");
                    document.getElementById("custom-date-input-error").style.display = "none";
                    addButton.disabled = false;
                }
            }
        }

        // check 'start date' is less than the 'end' or not
        // in the daily section
        function validateDailyDate() {
            const startDateInput = document.getElementById("daily-start-date");
            const endDateInput = document.getElementById("daily-end-date");

            // logs
            // console.log("start date " + startDateInput.value);
            // console.log("end date " + endDateInput.value);
            // console.log(startDateInput.value === '' || endDateInput.value === '');

            if (startDateInput.value === '' || endDateInput.value === '') {
                return 0
            } else {
                if (startDateInput.value > endDateInput.value) {
                    startDateInput.classList.add("is-invalid");
                    endDateInput.classList.add("is-invalid");
                    const customDateInputError = document.getElementById("daily-date-input-error");
                    customDateInputError.textContent = "Last date of completion must be atleast on day after the start date";
                    customDateInputError.style.display = "block";

                    // scroll to the bottom of the page
                    document.getElementById('meeting-needed').scrollIntoView({ behavior: "smooth" })
                } else {
                    startDateInput.classList.remove("is-invalid");
                    endDateInput.classList.remove("is-invalid");
                    document.getElementById("daily-date-input-error").style.display = "none";
                }
            }
        }

        // check 'start date' is less than the 'end' or not
        // in the weekly section
        function validateWeeklyDate() {
            const startDateInput = document.getElementById("weekly-start-date");
            const endDateInput = document.getElementById("weekly-end-date");

            // logs
            // console.log("start date " + startDateInput.value);
            // console.log("end date " + endDateInput.value);
            // console.log(startDateInput.value === '' || endDateInput.value === '');

            if (startDateInput.value === '' || endDateInput.value === '') {
                return 0
            } else {
                if (startDateInput.value > endDateInput.value) {
                    startDateInput.classList.add("is-invalid");
                    endDateInput.classList.add("is-invalid");
                    const customDateInputError = document.getElementById("weekly-date-input-error");
                    customDateInputError.textContent = "Last date of completion must be atleast on day after the start date";
                    customDateInputError.style.display = "block";

                    // scroll to the bottom of the page
                    document.getElementById('meeting-needed').scrollIntoView({ behavior: "smooth" })
                } else {
                    startDateInput.classList.remove("is-invalid");
                    endDateInput.classList.remove("is-invalid");
                    document.getElementById("weekly-date-input-error").style.display = "none";
                }
            }
        }

        // check 'start date' is less than the 'end' or not
        // in the monthly section
        function validateMonthlyDate() {
            const startDateInput = document.getElementById("monthly-start-date");
            const endDateInput = document.getElementById("monthly-end-date");

            // logs
            // console.log("start date " + startDateInput.value);
            // console.log("end date " + endDateInput.value);
            // console.log(startDateInput.value === '' || endDateInput.value === '');

            if (startDateInput.value === '' || endDateInput.value === '') {
                return 0
            } else {
                if (startDateInput.value > endDateInput.value) {
                    startDateInput.classList.add("is-invalid");
                    endDateInput.classList.add("is-invalid");
                    const customDateInputError = document.getElementById("monthly-date-input-error");
                    customDateInputError.textContent = "Last date of completion must be atleast on day after the start date";
                    customDateInputError.style.display = "block";

                    // scroll to the bottom of the page
                    document.getElementById('meeting-needed').scrollIntoView({ behavior: "smooth" })
                } else {
                    startDateInput.classList.remove("is-invalid");
                    endDateInput.classList.remove("is-invalid");
                    document.getElementById("monthly-date-input-error").style.display = "none";
                }
            }
        }


    </script>
</body>

</html>